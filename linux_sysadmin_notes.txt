*************************************
Linux Notes for System Administrators
*************************************

System Performance
==================
top
---
P       sort by     CPU
M       sort by     $MEM
T       sort by     TIME
N       sort by     PID
R       reverse sort order
S       toggle cummulative time (with dead children) and separate time for tasks

k       kill process
r       renice process

f       choose/move fields -> s sort by field  
u       filter by username
O       filter by CRITERIA=something
^o      show all applied filters (ctrl-o)
=       reset filters
+       reset filters in all windows
d       change delay
H       toggle threads/task
0       toggle zeros
i       toggle idle processes
n       set numbers of processes to display
c       toggle CMD name / CMD line [kernel task]
e       cycle through memory units (k, m, g, t, p)
g       choose group (Def, Job, Mem, User)
A       toggle multiple/single window
a/w     cycle through windows
z       toggle colors/bw
b       toggle bold/solid-background
x       highlight sort field
y       highlight Running processes
-       hide/show window

l       toggle uptime/load average in overview
t       cycle through CPU display
E       cycle through memory units (k, m, g, t, p, e) in overview
m       cycle through memory display in overview
1       toggle single/all cores
W       save configuration to file
C       show/hide scroll info
Z       set colors

atop                                            like top, but can handle very short-lived processes

htop                                            like top, more colors and features
                                                To install htop on RHEL we need to install a repo first:
                                                sudo dnf install epel-release
                                                sudo dnf install htop

vmstat 1 3                                      virtual memory stats on performance stats in 1s interval, 3x
mpstat -P All 1                                 multi-core performance stats by CPU core (ALL) with 1s interval
pmap 39427                                      show memory map of a process
iostat -x 1                                     show extended (-x) io-stats by disk with 1s interval
sar -n DEV 1                                    check network-layer I/O with 1s interval
sar -n TCP,ETCP 1                               check TCP transport-layer I/O every 1 second
pidstat [-p 1434] 1                             check process stats with 1s interval
strace -tp `pgrep process` 2>&1 | head 100      check system calls by a command (-t timestamps)
strace -o output -ff crummyd                    save system calls to 'output' and follow forked off daemons of crummyd (-ff)
iotop                                           displays I/O usage by process
iftop                                           displays I/O bandwith usage by interface
vnstat                                          terminal based network traffic monitor
glances                                         system performance shanpshot with max information
iptraf                                          real-time network stats
nethogs                                         small net top tool grouping bandwiths by process name (e.g. firefox)
time                                            measure time spent running a command
free -m                                         show memory overview in mebibytes

cat /proc/cpuinfo                               cpu info
cat /proc/meminfo                               memory info
cat /proc/zoneinfo                              detailed memory info
cat /proc/mounts                                mounts

ps command
==========
ps aux                                          show all processes on system
ps -ef                                          same as above
ps -u 0                                         show all real root user processes
ps -U 0                                         show all effective root user processes
ps - C sleep                                    show all processes running a command in the list
ps -t tty1,tty2                                 show processes on ttys on list
ps m                                            show threads and processes
ps -l                                           show long format, including PRI,NI 
ps -eo pid,pri,ni,command                       show custom output for all processes
ps o pid,min_flt,maj_flt,command                show min and major page faults


nice
====
nice -n 10 myscript.sh                          run script with lower priority (higher niceness)
nice 10 myscript.sh                             same as above

nice -n -10 myscript.sh                         run script with higher priority (lower niceness)
nice --10 myscript.sh                           same as above (!!, negative niceness values without the -n flag needs double '0`)

renice -n 15 -p 1776                            renice a process with lowwer priority
renice 15 -p 1776                               same as above

sudo renice -n -15 -u alice                     higher priority of all processes of a user
sudo renice -15 -u alice                        same as above

CAVE: nice and renice behave differently when omitting the -n flag ('nice` with double -- for negatives and 'renice` with one - for negatives)


screen command
==============
screen                                          open new session
screen -S <sessionname>                         open new session with name
screen -S <sessionname> -X quit                 quit session with name
screen -ls                                      list open sessions
screen -r [sessionname/pid]                     reattach to session
screen -x                                       attach to a not detached session (multi display mode)

ctrl-a                                          prefix-key

sessions
--------
d                                               detach from session
exit                                            kill session
\                                               kill all windows, regions and quit session

windows
-------
c                                               create new window
n                                               hop to next window
w                                               show all windows
"                                               show windows list
A                                               rename window
k                                               kill window

regions
-------
|                                               vertical split (new focus)
S                                               horizontal split
TAB                                             next region
X                                               kill region


tmux
====
tmux ls                                         list open session
tmux new                                        open new session
tmux attach-session -t 0                        reattach to session 0
ctrl-b                                          prefix-key
d                                               detach from session
%                                               vertical split (new pane)
"                                               horizontal split
c                                               create new window
o                                               next pane
ctrl+O                                          rotate panes
n                                               next window
exit                                            kill pane
&                                               kill window
?                                               show keybindings
:                                               command prompt
kill-session                                    kill entire session on command prompt


List open files - lsof
===============
losf /var/log/kern.log                          list processes that have opened a file
lsof +D /usr                                    list commands that have open files in /usr tree (+d 1st level only)
lsof -p PID                                     list open files of a process
lsof -c ssh                                     list open files by ssh
lsof -u alice                                   show open files of user alice
lsof -u alice -c ssh -a                         show ssh files opened by alice (logical AND)
lsof -u alice -c ssh -a -r5                     repeat every 5s: show ssh files opened by alice (logical AND)
lsof +D /home -u ^alice                         show all open files in /home not belonging to alice
lsof -i -a -c ssh                               show all open ssh internet files
lsof -i :22                                     show all files, opened by an internet connection on port 22
lsof -Pni4TCP:80                                list open IPv4 TCP connections on port 80 (-P no port names, -n no host names)
lsof-iTCP -sTCP:LISTEN                          list open TCP connections, that are listening
lsof -i 4 /mnt/wp-content                       list the IPv4 address of all open files in this folder


w
===
w                                               list who is logged in and what they are doing


diff command
============
diff -s <(journalctl -b 0) <(journalctl -b)     compare the output of the 2 commands (process substitution)
diff -u file1 file2                             show detailed patch diff info between two files

Localization
============
timedatectl                                     show system time status
timedatectl list-timezones                      find your timezone
timedatectl set-timezone Europe/Zurich          set timezone
timedatectl set-time '1980-1-1 17:00:00'        set date and time
systemctl status systemd-timesyncd.service      check SNTP daemon
timedatectl set-ntp yes                         enable network time sync

date                                            show date and time in localtime
date +%H:%M                                     show current hour:minute
date -u                                         show the same in UTC
date --set="2023-04-22 06:53:45"                set date and time
sudo hwclock --systohc --utc                    set RTC to system time
tzselect                                        find your timezone
ls -s /usr/shar/zoneinfo/Europe/Zurich /etc/localtime   set timezone

/etc/default/locales                            standard file for saving locales, if no systemd (no localectl)
locale                                          list locales (/etc/default/locale in Ubuntu, /etc/locale.conf in RHEL)
locale -a                                       list all available locales
locale -k LC_TIME                               list details about the TC_TIME locale setting
localectl status                                display locale status
localectl set-locale en_US.UTF-8                set locale (LANG) to US English
localectl set-locale LC_TIME=de_CH.UTF-8        set time format to Swiss German 
update-locale LC_TIME LANG=en_US.UTF-8          set locale to US English and clear LC_TIME (Ubuntu only)
/etc/locale.gen                                 contains list of locales that can be built, uncomment to choose
locale-gen                                      run command to build chosen locales


Timers
======
systemctl list-timers                           list all systemd timer units
crontab -e                                      open user crontab for editing, errors emailed (escape %)
crontab -l                                      list user crontab
/etc/crontab                                    system crontab file
/etc/cron.allow                                 whitelist users for cronjobs
/etc/cron.deny                                  blacklist users
at 22:30                                        one time timer 
at now + 5 minutes
at 16:00 + 3 days
/etc/at.allow                                   whitelist users for at
/etc/at.deny                                    blacklist users
*/5 * * * * sudo apt apdate                     example crontab: update package cache every 5 minutes
sudo systemd-run --on-active=5m                 one time timer 5minutes in the future
sudo systemd-run --on-calendar '2023-04-06 10:00' sh -c '/usr/bin/date >> /home/thomasgrusz/datetime.txt'


Logging
=======
/etc/systemd/journald.conf:                     journalctl config file
Storage=auto                                    log on disk, if '/var/log/journal` exists, otherwise log in /run/log/journal
Storage=persistent                              log both on disk and memory, and create both directories if the do not exist
Storage=volatile                                log in memory only
Storage=none                                    no logging
systemctl status systemd-journald               status of journaling service
journalctl --list-boots                         all boots
journalctl -b                                   boot of current session
journalctl -r -b -1                             boot before current one in reverse
journalctl -u ssh.service                       unit logs
journalctl /usr/sbin/sshd                       show logs related to program 'sshd`
journalctl -k                                   kernel logs (like dmesg)
journalctl -f                                   follow live logging (like tail -f)
journalctl -n 20                                list the last 20 journal lines
journalctl -S -4h                               last 4h (-S = since)
journalctl -S -5 minutes                        last 5 minutes
journalctl -S yesterday                         yesterdays logs
journalctl -S today                             logs from midnight today
journalctl -S '2023-04-01 14:00:00'             since <timepoint>
journalctl -p err                               priority emerg - error
journalctl -p 3                                 priority 0-3 (emerg - error)
journalctl -p 2..3                              priority 2-3 (alert - crit)
journalctl -g 'kernel.*memory'                  regex 
journalctl PRIORITY=3 SYSLOG_FACILITY=0         show all user-level error logs
man systemd.journal-fields                      show all possible journal fields
journalctl -D /media/...                        access log on another disk

last                                            last logins
lastlog                                         every user's last login

manual logging
--------------
logger -t THOMASGRUSZ hi from me                log message 'hi from me` tagged with THOMASGRUSZ
systemd-cat <return>                            cat into the log journal
echo "mindcode" | systemd-cat                   log <stdin> into journal
systemd-cat echo "stdout and stderr logged"     log command output (stdout and stderr)
systemd-cat -p emerg echo "Fake emergency"      log message with priority level

central log server
------------------
/etc/rsyslog.d/remote.conf:                     create configuration file for remote log server
$ModLoad imtcp.so                                                                               #load module
$InputTCPServerRun 514                                                                          #start TCP server on port
$template RemoteLogs,"/var/log/remotehosts/%HOSTNAME%/%$NOW%.%syslogseverity-text%.log"         #define logging remplate 
if $FROMHOST-IP=='192.168.50.100' then ?RemoteLogs                                              #filter condition
& stop                                                                                          #stop logging also to default /var/log/messages

/etc/rsyslog.conf:                              add this line on the client that wants to log centrally
*.* @@log_server_hostname:514

log rotation
------------
logrotate
/etc/logrotate.conf                             default configs for rotating logs, daily cronjob -> /etc/cron.daily/logrotate
/etc/logrotate.d/*                              file configs taking precedence
journalctl --disk-usage                         check file size of logs (max default size = 10% of filesystem, max 4GiB)
/etc/systemd/journald.conf:                     
SystemMaxUse=500M                               limit log diskspace to 500MB (default: 10% of filesystem, max 4GiB)
SystemKeepFree=500M                             disk space to be left free for others (default: 15% of fs, max 4GiB)
SystemMaxFileSize=8M                            limit logfile size to 8Mebibytes
SystemMaxFiles=100                              max number of log files
MaxFileSec=1month                               rotate to next logfile, so entries are not older than 1 month

manuall clean journal files
---------------------------
journalctl --vacuum-time=1months                get rid of messages in journal files older than 1 month (s,m,h,d,w,months,y)
journalctl --vacuum-size=800M                   delete journal files until used disk space is below 800MiB
journalctl --vacuum-files=10                    delete all but 10 journal files
journalctl --rotate                             rotate journal logs
journalctl --flush                              write memory files (/run/..) to disk files (/var/..) (make persistent)
sudo journalctl --sync                          write unwritten log data to disk
journalctl --verify                             check internal consistency of journal files

priority levels
---------------
0 emerg,panic
1 alert
2 crit
3 err
4 warn
5 notice
6 info
7 debug


bash shell (Bourne Again Shell)
====
bash -l                                         start new login shell
bash --login --noprofile                        start new login shell without sourcing /etc/profile or ~/.profile
bash -i                                         start an interactive (non-login) shell
bash --norc                                     start a non-login shell without sourcing /etc/bash.bashrc or ~/.bashrc
bash --rcfile <file>                            start non-login shell specifying rc file
exec bash                                       replace the current shell with a new non-login shell


User Management
===============
[sudo] su -                                     switch to root in login shell
[sudo] su carol                                 switch to user carol in a non-login shell
[sudo] su - carol                               switch to carol in login shell

sudo -i                                         start a root login shell
sudo -i /home/user/script.sh                    run script as root in login shell        
sudo -s                                         start a root non-login shell
sudo -i -u carol                                start login shell as user carol
sudo -s -u carol                                start non-login shell as user carol
sudo -u carol whoami                            run command 'whoami` as user carol

sudo visudo                                     edit sudoers list
/etc/sudoers:
%sudo ALL=(ALL:ALL) ALL                         the sudo group can execute all commands on all hostas as all users and groups, HOSTS=(USERS:GROUPS) CMDs
caro All= NOPASSWD: /usr/bin/systemctl restart apache2      carol can restart the apache2 webserver without password on all hosts

Prevent login by any user by creating the file '/etc/nologin`. The file may contain a message to users.


umask                                           list default permission mask
umask -S                                        list default perms in symbolic mode
umask 007                                       set umask to r=rwx,w=rwx,o=

/etc/login.defs                                 configuration file for useradd, usermod, userdel, groupadd
/etc/default/useradd                            some defaults for useradd

useradd -m -d /home/alice -G sudo -c Alice -s /bin/bash alice               create user alice with home-dir (-m -d), part of sudo group and GECOS details
useradd -s /usr/sbin/nologin cdrom                                          create an account that cannot login (polite no-login message in /etc/nologin.txt)
useradd -s /bin/false mysql                                                 create account that cannot login
useradd -r morpheus                                                         create system account
userdel -r                                                                  remove user alice including the home directory
usermod -aG testgroup foxmulder                 add foxmulder to testgroup
gpasswd -d foxmulder testgroup                  remove user foxmulder from group testgroup
usermod -l thomas thomasgrusz                   change login name of thomasgrusz to thomas
usermod -c Thomas -s /bin/zsh thomasgrusz       change GECOS and shell of user thomasgrusz
usermod -d /tmp/thomasgrusz thomasgrusz         change home directory of user thomasgrus
usermod -u 1100 -g 1100 thomasgrusz             change UID and GID of user thomasgrusz
usermod -L thomasgrusz                          lock account
usermod -U thomasgrusz                          unlock account

getent group                                    list groups on system
groupadd -r mixer                               add system group 'mixer`
groupdel mixer                                  remove group
groupmems -g cdrom -l                           list user belonging to cdrom group
groupmod -g 1010 mixer                          change gid of mixer group to 1010
groupmod -n tmux_mixer mixer                    change name of group to tmux_mixer

passwd -S root                                  view password status of root - check if password is set or locked
passwd -l thomasgrusz                           lock account
passwd -u thomasgrusz                           unlock account
passwd -d thomasgrusz                           delete password for this account
passwd -e thomasgrusz                           expire password of account

chage -l root                                   view detailed password status of root
chage -d 2023-06-02 thomasgrusz                 set date of lasst password change
chage -E 2024-01-01 thomasgrusz                 set expiry date for account
chage -I 7 carol                                set inactivity days after password expiry until account is locked
chage -m 7 alice                                set min days before password can be changed by user
chage -M 90 alice                               set max days after which passwd must be changed
chage -W 7 carol                                set number of warning days before password expiry

ulimit -a                                       list all soft limits of user
ulimit -Ha                                      list all hard limits of user
ulimit -n                                       softmax number of processes
ulimit -S                                       == ulimit -Sf, filesize softmax in blocks
ulimit -Hf                                      filesize hardmax in blocks
ulimit -f 1000                                  set soft- and hardlimit to 1000 blocks per file
/etc/secutiry/limits.conf                       configuration file for lmiits

find command
============
find / -maxdepth 2 -name "*.txt"                find all .txt files 2 levels in from root
find . -mmin -5                                 find files modified in the last 5 minutes in CWD
find $HOME -atime 0                             find files accessed in last 24h in home directory
find / -iname '*report.txt' -ctime 10           find case-insensitive report.txt files which attributes were changed in the last 10 days
find /usr/bin -perm /4000                       find files with SUID bit set
find . -perm -664                               find files with owner/group r+w and other read, irrespective of other permissions (e.g. execute bit), '-` = 'at least`
find . -perm /220                               find files the are either writable by the owner or group
find . -perm -220                               find files that are writable by owner and group
find . -name "*.bak" -delete                    find backups and delete them
find . -empty                                   find empty files
find . -type f -exec grep 'lpi' '{}' \; -print  print file with 'lpi' in name
find . -regex '.*/\..*' -size +100M             find hidden files or files in hidden directories greater than 100 Megabytes (basic regex)
find / -mount -name "*somefile*"                find somefile, without going down mounted filesystems
find /mnt -fstype exat -iname "*report*"        find report only in exfat-filesystems
find . user thomasgrusz -type f                 find files owned by thomasgrusz


This command finds movie files and copies them to the current directory:
find . -mindepth 2 -name '*avi' print0 -o -name '*mp4' -print0 -o -name '*mkv' print0 | xargs -0 -I PATH mv PATH ./

This command finds files and saves them in a .xz compressed tar archive file:
find /etc -type f -print0 | tar -cJ -f /srv/backup/etc.tar.xz --null -T -

Find all files not ending in a standard file suffix:
find . -type f -regextype egrep -not -regex '.*\.[[:alnum:]]{1,}$'

This command finds an extended regex pattern ignoring case:
find /usr/share/fonts -regextype posix-extended -iregex '.*(dejavu|liberation).*sans.*(italic|oblique).*'

This command traverses the filesystem 1x stores files with the SUID set and files over 100Mb in 2 separate text files:
find / \
         \( -perm /4000 -fprintf /root/suid.txt '%#m %u %p\n' \) , \
         \( -size +100M -fprintf /root/big.txt '%-10s %p\n' \)


set
===
set                                             list all defined variables and functions
set -o noclobber                                set noclobber shell option, that redirects do not overwrite existing files
set +o noclobber                                unset noclobber
set -e                                          exit immediately on error (non zero exit status of a command)
set -f                                          never expand file names (no globbing)
set -x                                          print commands and arguments as they are executes

shop
=====
shopt -s nocasematch                            enable case insensitivity for 'case construct` 
shopt -u nocasematch                            disable case insensitivity for 'case construct` 


sed
===
sed -n -e '1'p -e '10'p -e '$'p /etc/passwd     list 1st, 10th and last line of password file
sed 's/-/./g' <<< $(date +%Y-%m-%d)             current date with dashes replaced by dots
sed 's/./\L&/g' file.txt                        turn all characters to lower case in file.txt
sed 's/./\U&/g' file.txt                        turn all characters to upper case in file.txt
sed -i.BAK '/^#/d/' /etc/sshd/ssh.conf          remove all lines starting with a #, and save backup of the original with suffix .BAK


awk
===
cat /etc/passwd | awk -F: '{print $1,$7}'       print field 1 and 7 of passwd file
awk 'NR==1; NR>1{print ($2=="F" ? ($1-32) / 1.8 : $1)" C"}' temps.csv
awk '/e$/{print $0}' animals.txt                print lines that end with an 'e`
awk '/e$/' animals.txt                          same as above, but simpler (cf. grep)

awk 'BEGIN{counter==1; print "Begin";}
     {print "Line number: "(counter); counter += 1;}
     END{print "End"}
    ' numbers.txt


Hexdump
=======
hexdump -C file.txt                             display characters as hex and clear text at line end`
hexdump -c file.txt                             display characters, also hidden ones, like line-breaks (\n)
od file.txt                                     octal dump
od -c file.txt                                  show all characters
od -x file.txt                                  hex dump


Archiving & Compression & Moving
================================
ls | cpio -o > archive.cpio                     create cpio archive
cpio -i < archive.cpio                          extract cpio archive (absolute filenames preseverd, but not shown)
cpio -iI archive.cpio                           "
cpio -iv --no-absolute-filenames < archive.cpio extract cpio archive verbosely with relative filenames
cpio -tviI arichive                             list contents of cpio archive

tar -cf archive.tar text?.txt                   create tar archive
tar -xf archive.tar                             extract tar archive
tar -tf archive.tar                             show contents of tar archive

tar -zcf archive.tar.gz text?.txt               create a gzip compressed tarball
tar -zxf archive.tar.gz                         extract a gzipped tarball

tar -jcf archive.tar.bz2 text?.txt              create bzip2 compressed tarball
tar -jxf archive.tar.bz2                        extract a bzipped2 tarball

tar -Jcf archive.tar.xz text?.txt               create a xz compressed tarball 
tar -Jxf archive.tar.xz text?.txt               extract a xz compressed tarball

dd in=/dev/sda of=/dev/sdb status=progress      copy entire disk

cp -r folder dest_folder                        copy entire folder to dest_folder
cp -r folder/ dest_folder                       copy entire folder to dest_folder
cp -r folder/* dest_folder                      copy contents of folder to dest_folder

mv file1 file2 -t dest_folder                   move files to 'target' dest_folder

rsync -av folder  destination_host:/folder                                              copy entire folder into destination folder via ssh
rsync -av folder-contents/  destination_host:/folder                                    copy folder contents to destination folder via ssh


Shutting down - Reboot
======================
sudo shutdown -h now                            shutdown computer now
sudo shutdown -h 5                              shutdown in 5 minutes
sudo shutdown -r now                            reboot now
sudo init 6                                     rebott now
cat warning.txt | wall                          send a warning text to all virtual terminals


Email
=====
MTAs: sendmail, postfil, qmail, exim
----
/etc/mail/sendmail.mc:                          MTA conf file
DAEMON_OPTIONS(`Family=inet,  Name=MTA-v4, Port=smtp, Addr=192.168.50.100')dnl          make MTA accept non-local connections

mailq                                           check if there is unset mail queued
sendmailq                                       send queued mail again

Send a mail using 'sendmail` only
---------------------------------
sendmail alice@ubuntuserver100
From: thomasgrusz@ubuntuserver100
To: alice@ubuntuserver100
Subject: mysubject
MY MESSAGE
.

MUAs: mail
----
ls /etc/ssh/ | mail -s "ssh config dir" root                                    send mail to root with folder contents
mail -s "subject" alice@ubuntuserver100 <<< "My Message"                        send email using MUA 'mail`
echo "My Message" | mail -s "subject" alice@ubuntuserver100                     send email 
echo "Pls ack reception of attachment" | mail -a /var/log/mail.log root         send attachment and body text to root (not working with all variants of 'mail`

/etc/aliases:                                                                   config file for mail aliases
postmaster: alice,thomasgrusz
sudo newaliases
echo "Testmessage" | mail -s "postmaster-test" postmaster@ubuntuserver100       send mail to alice and thomasgrusz

/home/alice/.foward:                                                            forward all mail for alice to carol (perm: 600 !!)
carol   


Printing (CUPS)
===============
CUPS printers can be configured using a web interface:
------------------------------------------------------
go to 'http://ubuntuserver100:631` using a webbrowser
if you want to access the cups server from another machine, you need to enable remote access with:
/etc/cups/cupsd.conf:
Add     'Allow @LOCAL' to all of the following sections:
<Location />
<Location /admin>
<Location /admin/conf>
<Location /admin/log>
On ubuntu add the SysAdmin to the 'lpadmin` group

sudo lpstat -p                                  list all available printers
sudo lpstat -d                                  show default printer
sudo lpoptions -d <queue-name>                  set default printer
sudo lpstat -v                                  show connections
sudo lpstat -t                                  show status
sudo cupsreject -r "reason" <queue-name>        reject new print jobs and give reason to user (-r)
sudo lpadmin -x <queue-name>                    remove printer
sudo lpadmin -p <queue-name> -o printer-is-sharable=true        make printer 'shared' in network
sudo cupsctl --share-printers                                   allow printer sharing within local network
sudo cupsctl --no-shared-printers                               no shared printers
sudo lpadmin -p PRINTER -n allow:alice,carol                    set allowed users
sudo lpadmin -p PRINTER -n deny:@sales                          deny printing on PRINTER to group 'sales'

lp sample.txt                                   print file to default printer
cat /etc/passwd | lp                            print contents of passwd file
lp -d PRINTER sample.txt                        print file to specific queue
lp -d PRINTER -n 7 -o collate=true status.rep   print 7 collated copies of the status report on a specified printer
lpstat -o                                       list print jobs
sudo cancel                                     cancel current print job
sudo cancel PrintJob-1                          cancel print job named 'PrintJob-1`
sudo cancel -a                                  cancel all print jobs


systemd
=======
/lib/systemd/system                             system units folder, overwritten by distro updates (lowest priority)
/run/systemd/system                             same as above but with higher priority
/etc/systemd/system/                            local system configuration (takes precedence over the other two)

systemctl -p UnitPath show                      show unit search path
systemctl list-units --all                      list all systemd units
systemctl status or systemd-cgls                list all control groups in systemd
systemctl list-jobs                             list all current jobs (starting, waiting...)
systemctl edit sysstat-collect.timer            edit a partial override file: /etc/systemd/system/sysstat-collect.timer.d/override    (cave: read instructions!)
systemctl edit --full sysstat-collect.timer     edit a full override file: /etc/systemd/system/sysstat-collect.timer
systemctl daemon-reload                         reload all unit configuration files (after changing unit-files)
systemd-analyze                                 profile systemd boot process
systemctl list-dependencies --reverse libvirtd  list all units that 'WANT' libvirtd

systemctl get-default                           show default target
systemctl set-default multiuser.target          set default target (in etc/.., overrides setting in /lib..)
systemctl isolate rescue                        start rescue mode while computer is already running

Boot targets:
poweroff
rescue
multiuser
graphical
reboot


SySV
====
0                                               shutdown
1                                               single user
2                                               multiuser/graphical Desktop (ubuntu/debian), multiuser without net (RHEL)
3                                               multiuser with net (RHEL)
4                                               -
5                                               graphical desktop (RHEL)
6                                               reboot

runlevel                                        current runlevel
telinit 1                                       change to runlevel 1
/etc/inittab                                    default runlevel

/etc/init.d/                                    contains service files
service sshd start/stop/status                  start / stop / status of service
chkconfig --list sshd                           show at what runlevels sshd is active
chkconfig sshd on                               turns sshd service on for runlevels 2-5
chkconfig sshd off                              turn sshd service off
chkconfig --level 3 sshd on                     turn sshd service on for runlevel 3 only


udevadm
=======
udevadm info --query=all --name=/dev/sda        find sysfs location of /dev/sda
udevadm monitor --property                      show udevd events sent by the kernel

udev rules hierarchy:
/etc/udev/rules.d/
/run/udev/rules.d/
usr/lib/udev/rules.d/


Package Management
==================
RHEL-Clones
-----------
dnf download <package-name>                     download a package without installing it
dnf install <package-name>                      download and install a package
dnf remove <package-name>                       remove a package
rpm -i zsh-5.5.1-10.el8.x86_64.rpm              install a package 
rpm -Uvh zsh-5.5.1-10.el8.x86_64.rpm            update or install a package with progressbar (#) and verbose
rpm -e zsh-5.5.1-10.el8.x86_64.rpm              remove a package 
rpm -q zsh                                      query if package is installed
rpm -qi zsh                                     list detailed info 
rpm -qc zsh                                     list config files 
rpm -qR zsh                                     list dependencies
rpm -q --whatprovides zsh                       show what package file belongs to
rpm -qa                                         list all installed packages

Debian-Clones
-------------
dpkg -I zsh_5.8.1-1_amd64.deb                   get info on uninstalled package
dpkg -c zsh_5.8.1-1_amd64.deb                   show contents of uninstalled package file
dpkg --get-selections                           list all installed packages
dpkg -l                                         list all installed packages
dpkg -i zsh_5.8.1-1_amd64.deb                   install or update a package 
dpkg -r zsh                                     remove package
dpkg -P zsh                                     remove package and config files (Purge)
dpkg -s zsh                                     show info about installed package, incl. status
dpkg -L zsh                                     list all files associated with installed package
dpkg -S /usr/bin/vim.basic                      show package that file does belong to
dpkg-reconfigure vim                            reconfigure an installed package
dpkg -C vim                                     search for broken installed packages and suggest fixes
debconf-show cups                               show configuration of package
apt-cache policy vim                            show repos from which package was downloaded
apt-get -f libglib2.0-0                         fix broken package
apt-mark hold apache2                           pin the package version and prevent upgrading
apt-mark unhold apache2                         unhold package

PPA - Personal Package Archive (Ubuntu specific tool !)
------------------------------
/etc/apt/sources.list                           list with all apt repos
sudo add-apt-repository ppa:mozillateam/ppa     add a PPA repo to /etc/apt/sources.list.d/
sudo add-apt-repository -r ppa:<PPA-Info>        remove PPA repo

Snap
----
sudo snap install firefox                       install firefox snap package
sudo snap remove firefox                        remove snap package
sudo snap refresh                               refresh snap packages

Arch Linux
----------
pacman -Qo                                      find package that owns a file

Add Debian 12 Backports repo
----------------------------
/etc/apt/sources.list.d/backports.list:
deb http://deb.debian.org/debian bookworm-backports main
sudo apt update
sudo apt install -t bookworm-backports <package-name>


Patch Management
================
Schedule patches, once weekly is a good compromise between bandwith waste and security (search and install)
Apply critical patches immediately
Wait for general software and system updates to be tested by the public before installation
Redhat offers email subscription service for security issue notification
Prepare for buggy updates:
    - Review and test non-essential updates several times prior to releasing them
    - Plan regular backups to roll back in case the patch causes any undesirable effects.
    - If you are able to figure out which patch is causing your issues, you can try uninstalling the specific software package and installing a fresh copy.
Run significatn updates after business hours or during weekends and be available before going live. Business continuity.
Read through the release notes before applying patches.
Consider virtualization -> easier 


Shared Libraries
================
Locations:
1.  LD_LIBRARY_PATH
2.  PATH
3.  /etc/ld.so.conf.d/
4.  /erc/ld.so.conf
5.  /lib*/ and/or /usr/lib*/

/usr/lib/x86_64-Linux-gnu/ld-linux-x86-64.so.2  This is the linker or loader that loads dynamic libraries for code execution.
ldd /usr/bin/echo                               list shared libraries used by echo
ldconfig                                        update library cache
ldconfig -v                                     list files in the library cache


Kernel Modules
==============
find /lib/modules/$(uname -r) -type f -iname "*.ko"     list all installed modules
modprobe lp                                     load the printer driver
modprobe -r lp                                  remove the printer driver module

/usr/lib/modprobe.d/                            contains configuration files for modprobe
/etc/modprobe.d/                                overrides conf files in /usr/lib/modprobe.d

macbookpro mid-2009(5,5)
------------------------
lscpi -nnks 3:00                                list details for the Broadcom Network Controller
sudo apt install broadcom-sta-dkms              install kernel module 'wl`, i.e. the driver for the wlan adapter (add 'non-free` in /etc/apt/sources.list behind every line, apt update)
sudo depmod                                     creat new kernel modules depency file (wl conflicts with b43, et al and adds a blacklist file in /etc/modprobe.d/broadcom-sta-dkms.conf)
sudo update-initramfs -u                        update the existing initramfs file with the new blacklist
reboot


ip command
==========
ip a                                            show interfaces (links) and ip addresses
ip -4 a                                         show IPv4 addresses only
ip addr show dev enp0s7                         show address of device enp0s7 only
sudo ip a add 192.168.50.33/24 dev enp0s7       add ip address to device
sudo ip a del 192.168.50.33/24 dev enp0s7       delete ip address to device

sudo ip link set enp0s7 down                    stop network interface
sudo ip link set enp0s7 up                      start network interface
ip -s link                                      print inteface stats

sudo ip link set dev enp0s7 promisc on          put interface into promiscuous mode
sudo ip link set dev enp0s7 promisc off         reset interface into normal mode
sudo ip link set dev enp0s7 allmulti on/off     put interface into multicast/normal mode

sudo ip link add dev dummy type bridge          create dummy bridge interface

group devices in /etc/iproute2/group            Add a group with: '1     blue'
sudo ip link set dev lo group blue              group device into group 'blue'
ip link show group blue                         show all devices in the 'blue' group

ip route                                                    show defined routes
ip route list 192.168.50.1                                  display info for single route
sudo ip route add 192.168.121.0/24 dev enp0s8 metric 100    create a new route
sudo ip route delete 192.168.121.0/24 dev enp0s8            delete route
sudo ip route add default via 192.168.1.1 dev enp0s3        add default gateway
ip route save > routes_backup                   backup routing table
ip route restore < routes_backup                restore routing table


ss command
==========
ss -tunalp                                      socket stats: tcp udp no-name-lookup all-sockets listening-sockets process-ids


tcpdump
=======
sudo tcpdump -i enp0s7 'udp port 53'                                    display all traffic info for DNS on interface enp0s7
sudo tcpdump -i enp0s7 'dst 192.168.50.1 and (port 21 or 20)'           show all FTP (ports 21/22) sessions to 192.168.50.1
sudo tcpdump -ni enp0s7 'dst 192.168.50.1  and tcp and port http'       show all HTTP sessions (port 80 = http) to host 192.168.50.1


nmap command
============
nmap -p ssh,80 localhost 192.168.50.100-200     scan ports 22 and 80 on localhost and a range of hosts


dhclient
========
sudo dhclient -v -r                             release DHCP-leased IP address
sudo dhclient -v                                get new DHCP IP address


NetworkManager
==============
nmcli device                                                                    list all devices (interfaces)
nmcli device wifi list                                                          list all available WIFI networks in the local area
nmcli device connect B47                                                        connect to a WIFI network
nmcli device wifi connect Hypnotoad password MyPassword hidden yes              same as above
nmcli connection show                                                           show all connections
nmcli connection down B47                                                       deactivate connection
nmcli device disconnect wlp0s2                                                  deactivate device
nmcli device connect wlo2                                                       activate connection to interface wlo2
nmcli radio wifi off                                                            turn radio off and save power (or on)
nmcli connection delete "Hotel Internet"                                        delete a connection named "Hotel Internet"
nmcli con add ifname br0 type bridge con-name br0                               add a new bridge called br0

Set a bridge interface for KVM virtual machienes to connect outside of the network created by the hypervisor (192.168.50.122.0/24):
-----------------------------------------------------------------------------------------------------------------------------------
use 'brctl` command for testing as no configuration files are altered:
sudo brctl addbr br0                                                            add a bridge device called br0
sudo brctl addif br0 enp2s0                                                     add the host ehternet interface enp2s0 to the bridge

for a permanent solution use 'nmcli`:
sudo nmcli connection add type bridge ifname br0 stp no forward-delay 0         create a bridge device called br0 (automatic connection name: bridge-br0)
sudo nmcli connection add  type ethernet ifname enp2s0 master br0               add the ethernet interface to the bridge connection
sudo nmcli device down enp2s0                                                   disconnect the ethernet device enp2s0
sudo systemctl restart NetworkManager                                           restart Network Manager

to revert the configuration use:
sudo nmcli connection delete bridge-br0                                         delete bridge-br0 connection
sudo nmcli connection delete bridge-slave-enp2s0                                delete slave connection to the ethernet interface
sudo systemctl restart NetworkManager                                           restart NetworkManager


Hardware Drivers
================
sudo lspci -k                                   show hardware connected to PCI including driver info -> wl
sudo lspci -vs 02:00                            show verbose info on hardware in slot 02:00
sudo lsmod | grep wl                            show loaded driver and dependents
modinfo wl                                      show driver info, including parameters
modinfo -p wl                                   show driver parameters only 

MacAir Antix Base Wifi Adapter Drivers:
Kernel driver in use: wl
Kernel modules: bcma, wl
'wl' depends on 'cfg80211' and it depends on 'rfkill'
https://wiki.debian.org/wl


Disk Management
===============
fdisk, cfdisk, gdisk, parted gparted            disk management utilities for partitioning and formating

parted
------
select /dev/sdb                                 select device
print devices                                   list connected devices
print                                           list partition table of active device
print free                                      show free space on active device
mklabel gpt                                     create gpt partition table (gpt or msdos)
mkpart primary ext4 2048s 100%                  create primary partition starting at sector 2048 (1 sec = 512B) (starts at 1049kB) until the end, ext4 fs is just a flag
mkpart primary ext2 1M 50%                      create primary partition starting at 1MB = 1049kB until 50% of remaining disk
mkpart extended 2684M 100%                      new extended partition from 2684MB until the end
rm 1                                            remove first partition
rescue 90m 220m                                 try to rescue a partition that 'lived' somwehere in between 90MB-220MB (e.g. 99.6MB-200MB) (must have filesystem to work)
resizepart 3 2500M                              resize partition 3 to end at 2500MB of disk (now also resize filesystem using 'resize2fs`)
mkpart primary linux-swap 500M 2500M            create a swap partition
name MyLabel                                    assign partition label (only gpt, not msdos)

Swap
----
mkswap /dev/sda2                                'format` a partition as swap
swapon                                          turn on swap partition

dd if=/dev/zero of=myswap bs=1M count=1024      create a file to become the 'swapfile`
chown root:root myswap && chmod 0600 myswap     set correct ownership and permissions
mkswap myswap                                   make the swapfile
swapon myswap                                   turn swapfile on

sysctl vm.swappiness                            display swappiness value (def: 60), 0 would make the kernel to use swap as little as possible

Filesystems
-----------
mkfs.ext4 -L Volume_label /dev/sda1             create ext4 filesystem with a label
mk2fs -t ext4 /def/sda1                         create ext4 filesystem
mkfs.ext3 -n /dev/sda1                          dry-run creation of ext3 partition
mkfs.ext2 -c -L MyDisk -U random /dev/sdc1      create an ext2 filesystem with a Label and random UUID, and check for bad blocks before
mke2fs -O journal_dev /dev/sdb1                 creat a partition for ext4 logging
mkfs.ext4 -J size=10,location=100M,device=/dev/sdb1 /dev/sdb2   creaat ext4 partition with logfile on other disk

mkfs.xfs -L VOL1 -N /dev/sda1                   dry-run creation of xfs filesystem with label
mkfs.xfs -l logdev=/dev/sdb1,size=10m /dev/sda2 create xfs filesystem with journal on sdb1 and max size of 10MB
mount -t xfs -o logdev=/dev/sdb1 /dev/sdb2 /mnt/myDrive     mount an xfs filesystem with the logfile on another partition

mkfs.fat -F32 -n LABEL /dev/sda1                create a FAT32 filesystem with LABEL
mkfs.exfat -n LABEL                             create exFAT filesystem with LABEL

mkfs.btrfs -d single -m single /dev/sdb1 /dev/sdc1                  create btrfs filesystem over 2 disks
mkfs.btrfs /dev/sdb1 /dev/sdc1 -m raid1                             create a mirrored btrfs partition
mkfs.btrfs -L label /dev/sda1                                       create btrfs filesystem with label
btrfs subvolume create /mnt/mounted_btrfs/my_subvol                 create a subvolume on a mounted btrfs filesystem
btrfs subvolume show /mnt/mounted_btrfs/my_subvol                   status of subvolume on a mounted btrfs filesystem
mount -t btrfs -o subvol=my_subvol /dev/sdb1 /mnt/mounted_subvol    mount subvolume
umount /mnt/mounted_btrfs                                           unmount btrfs filesystem (subvol stays mounted)
btrfs subvolume snapshot /mnt/mounted_btrfs /mnt/other_btrfs/snap1  create snapshot of filesystem (-r for readonly snaps)

resize2fs -M /dev/sdb1                          resize filesystem to minimum
resize2fs /dev/sdb2 88M                         resize filesystem to 88MB
resize2fs /dev/sdb3                             resize filesystem to maximum (unmount first)

fsck /dev/sdb1                                  check fs integrity with smart type detection (unmount first)
fsck.ext4                                       symbolic link to e2fsck
e2fsck /dev/sb1                                 check integrity of an ext2/3/4 filesystem
fsck -t vfat /dev/sda1                          specify fs type to check itegrity
fsck.msdos                                      same as fsck -t vfat
fsck -p /dev/sdb1                               check fs and automatically fix errors
fsck -y /dev/sdb1                               check fs answer all questions with 'yes`

xfs_repair -n /dev/sda1                         check xfs filesystem (dry-run)
xfs_repair /dev/sda1                            repair filesystem
xfs_repair -l /dev/sdb1 /dev/sdb2               repair filesystem with journal on other partition
xfs_repair -m 4096 /dev/sdb2                    repair xfs filesystem limiting the RAM (megabytes) used to repair
xfs_repair -d /dev/sdb2                         'dangerously` repair a mounted read-only xfs filesystem
xfs_repair -L /dev/sdb2                         force log zeroing, when log is corrupt, before trying to repair fs - last resort
xfs_db /dev/sdb2                                inspect xfs filesystem (help for help, then e.g. help stack)
xfs_fsr /dev/sdb2                               defragment all mounted, writable filesystem (takes 2h !)

tune2fs -l /dev/sda2                            list fs parameters (ext2/3/4 only)
tune2fs -l UUID="....."                         list fs parameters using UUID
tune2fs -l LABEL"..the_label.."                 list fs parameters using fs-label
tune2fs -L MyLabel /dev/sda2                    set fs-label
tune2fs -c /dev/sda2                            set maximum mount counts before fs is fsck'ed upon boot
tune2fs -C /dev/sda2                            set mount count
tune2fs -i 10d                                  check fs integrity every 10 days (m for months, y for years)
tune2fs -e continue                             kernel behaviour in case of fs error detection (remount-ro, panic)
tune2fs -j /dev/sda2                            add a journal, i.e. ext2 -> ext3


df -hTx tmpfs                                   list mounted filesystems in human readable form with FS type excluding tmpfs-filesystems
df -i                                           list inode info on mounted filesystems

du                                              disk usage in kb for current folder and subfolders
du -d 1                                         same as above, but only show one level in - useful to identify large folders
du -hs                                          summary du in human readable form for current folder and subfolders
du -df -hsc /home/thomasgrusz /etc              summary du of 2 folders and a grand total - useful ***
sudo du -hsc /* 2>/dev/null                     list root folders with size plus grand total
du -a                                           du for all files and folders (incl. subfolders)
ncdu                                            du with text GUI using curses
ncdu -x /                                       TUI list root folders without mounted FS - useful ***
 

SSH
===
ssh-keygen -R 192.168.50.148                    remove offending key in .ssh/known_hosts file for 192.168.50.148
ssh-keygen                                      generate a new pair of private/public keys (~/.ssh/authorized_keys)
ssh-keygen -t ed25519                           generate ed25519 key pair
ssh-copy-id -i <public_key> user@host           copy public key to host (perm priv:0600, pub:0644)
cat .ssh/id_ecdsa.pub | ssh ina@host 'cat >> .ssh/authorized_keys'       2nd way to copy public key to host, needed in case of different user
ssh-keygen -p                                   change passphrase
ssh-agent /bin/bash                             start ssh agent
ssh-add                                         add current user's passphrase in secure memory
ssh-add -D                                      remove all identities from the agent (memory)
ssh-keygen -A                                   generate host key pairs (rsa, ecdsa, ed25519)
ssh-keygen -lvf /etc/ssh/ssh_host_rsa_key.pub   show key's fingerprint and random ASCII art

~/.ssh/config:                                  ssh-agent config file
Host ubuntuserver100
    # on UTM QUEMU
    Hostname 192.168.50.100    # Fixed DHCP Lease
    Port 22
    User thomasgrusz
    #IgnoreUnknown UseKeychain
    AddKeysToAgent yes
    #UseKeychain yes
    IdentityFile ~/.ssh/B47_virtual_servers_id_ed25519

ssh -X host                                     create ssh connection with X server forwarding
export XAUTHORITY=$HOME/.Xauthority             execute command on ssh'ed in host
firefox &                                       start firefox in terminal through ssh connection and the local host displays the firefox session

permissions
-----------
home/user   : 755 (-rmxr-xr-x)
.ssh/       : 700 (drwx------)
.pub        : 644 (-rw-r--r--)
private key : 600 (-rm-------)

Tunnels
-------
Establish an ssh-tunnel between localhost and ubuntuserver101 with a direct connection to www.gnu.org
The first localhost in the ssh command below is optional.

ssh -L localhost:8585:www.gnu.org:80 ubuntuserver101
lynx http://localhost:8585

Create a tunnel between localhost:8585 and ubuntuserver101:80.
The term localhost below refers to the localhost on the remote server.
The -N option prevents login, and the -f option puts the ssh connection into the background.

ssh -L 8585:localhost:80 -Nf ubuntuserver101

Establish a reverse tunnel between ubuntuserver101:8585 (remote server) and localhost:80 on ubuntuserver100(not mentioned, server 1):
ssh -R 8585:localhost:80 -Nf ubuntuserver101


GPG and Encryption
==================
~/.gnupg/pubring.kbx                            keyring for own and all imported public keys
~/.private-keys-v1.d/                           folder for user's private keys
~/.gnupg/openpgp-revocs.d/                      folder for revocation certificates
~/.gnupg/trustdb.gpg                            'web of trust`

gpg --list-keys                                 view private keys
gpg --fingerprint carol                         view fingerprint of pub.key

gpg --gen-key                                   generate keypair
gpg --export carol                              view carol's pub.key (stdout)
gpg --export > carol.pub.key                    save carol's pub.key to file 
gpg --export --armor > carol.pub.key            save carol's pub.key with ASCII armor to file (save for emailing) 
scp carol.pub.key ina@host:/home/ina/           send carol's pubkey to ina, so she can decrypt messages from carol

gpg --gen-revoke carol > revocation_file.asc    create key revocation file in ASCII, to render key unusable
gpg --import revocation_file.asc                to deactivate the private key, merge the revocation file by importing it

gpg --import carol.pub.key                                                                  for Ina to decrypt messages to carol, she needs to import carol's pub.key, that she received via scp or email
gpg --output encrypted_message.asc --recipient thomas --armor --encrypt message.txt         encrypt message file 'm.txt` using thomas' pub.key and ASCII armor
gpg --output decrypted_msg.txt --decrypt encrypted_message.asc                              carol can now decrypt Ina's message, after having received it via scp (or email)

gpg --output message.sig --sign message         sign message using private key (file is also compressed and converted into binay)
gpg --verify message.sig                        verify the signature of the file
gpg --output message --decrypt message.sig      to read the signed file, it needs to be decrypted

gpg-agent --help                                show help for gpg agent


Consol Setup
=============
sudo dpkg-reconfigure console-setup             choose font and fontsize for virtual console


BIOS & UEFI
===========
Check if computer is run via BIOS or UEFI: /sys/firmware/efi

sudo efibootmgr -v                                                                      display NVRAM status info
sudo efibootmgr -b 0000 -a                                                              activate boot entry 0x0000
sudo efibootmgr -b 0001 -A                                                              deactivate boot entry 0x0001
sudo efibootmgr -b 0001 -B                                                              delete boot entry 0x0001
sudo efibootmgr -o 0001,0000                                                            set boot order to 0001 and then 0000
sudo efibootmgr -c -d /dev/sda -p 1 -L <Label> -l \EFI\<label>\grubx64.efi              create new boot entry at first position in order
The line above could also be achieved by booting into the installed OS and then:
sudo grub-install /dev/sda/ --target=x86_64-efi --efi-directory=/boot/efi               the partition is being derived from the booted system


Grub2
=====
man 7 bootparam                                 man pages for possible linux kernel boot parameters
pager=1                                         set pager
videoinfo                                       display available resolutions

Show Grub boot menu on Macbook Pro 2009 (i.e. remove shim.efi package)
----------------------------------------------------------------------
sudo apt-get purge --allow-remove-essential shim-signed
rm -rf /boot/grub
grub-install /dev/sda
/etc/default/grub:
GRUB_TIMEOUT_STYLE=menu
GRUB_TIMEOUT=3
GRUB_TERMINAL=console
sudo update-grub

Secure the Grub2 bootloader with a password (http://daniel-lange.com/archives/75-Securing-the-grub-boot-loader.html):
-------------------------------------------
grub-mkpasswd-pbkdf2 <password to be hashed>

Add in '/etc/grub.d/40_custom':
set superusers="thomasgrusz root" 
password_pbkdf2 thomasgrusz grub.pbkdf2.sha512.10000.aaa...(the hashed passwd)
password_pbkdf2 root ...

In case you want to have users boot to an entry whithout password, then add the option '--unrestricted' in '/etc/grub.d/10_linux':
[...]
echo "menuentry '$(echo "$title" | grub_quote)' --unrestricted ${CLASS} \$menuentry_id_option 'gnulinux-$version-$type-$boot_device_id' {" | sed "s/^/$submenu_indentation/"
else
echo "menuentry '$(echo "$os" | grub_quote)' --unrestricted ${CLASS} \$menuentry_id_option 'gnulinux-simple-$boot_device_id' {" | sed "s/^/$submenu_indentation/"
[...]

sudo update-grub

Change root password booting in single user mode from GRUB
----------------------------------------------------------
press right-shift or ESC during boot process
press 'e' to edit the boot loader instructions
in the line beginning with 'linux' replace the 'ro' at the end with 'rw init=/bin/bash'
change the root password with 'passwd'
reboot with 'exec /sbin/init'


Make a USB drive with several Linux distro installers - Ventoy
=============================================================
Download and extract latest tarball
curl -s https://api.github.com/repos/ventoy/Ventoy/releases/latest | grep browser_download_url.*tar\.gz | cut -d : -f 2,3 | tr -d "^ " | tr -d \" | wget -qi -
tar xzvf ventoy-*

Launch GUI version for browser
cd ventoy-* && sudo bash VentoyWeb.sh

Install/update via CLI version (check correct usb drive with `sudo fdisk -l')
sudo bash VentoyDisk2Disk -si /dev/sd?          # -i is to enable secure boot support
sudo bash VentoyDisk2Disk -su /dev/sd?


cloud-init
==========
disable cloud-init:                             sudo touch /etc/cloud/cloud-init.disabled                                   


Bash Scripting
==============
reptile=tortoise                                define local variable
echo $reptile                                   echo variable content
echo ${reptile}                                 echo variable content
echo ${#reptile}                                echo length of variable
FREE=$(( 1000 * $(sed -nre '2s/[^[:digit:]]//gp' < /proc/meminfo) ))        store the number of free bytes in variable

readonly reptile=croc                           define readonly variable
readonly -f my_function                         make a function readonly

set                                             list currently available shell variables (local and global [env]) and functions
unset variable_name                             remove variable
env                                             list all environment variable (global)
[env] IFS=$'\n' cat somefile.txt                temporarily set a variable for executing a command (ANSI-C quoting of IFS variable)
env -i bash                                     start a new bash shell with as little env variables as possible

export                                          list all env variables
export reptile                                  local variable -> env variable (global)
export -n reptile                               env variable -> local variable
declare -x reptile                              local variable -> env variable (same as above)

declare -a SIZES                                declare an array
SIZES=( 1048576 1073741824 )                    declare and define an array
echo ${SIZES[0]}                                print first element of array
echo ${#SIZES[0]}                               print length of first element of array
$SIZES[2]="Loki"                                define third element of array
echo ${SIZES[*]}                                print all array elements
echo ${SIZES[@]}                                print all array elements
echo ${#SIZES[@]}                               print array length
FS=( $(cut -f 2 < /proc/filesystems) )          command substituion to create an array with parenthesis notation
mapit -t myarrayvariable < myfile.txt           turn a file into an array (-t removes delimiter, \n by default

let "my_val = 5 + 5"                            create new variable with 10 as content
let "your_val = $my_val / 2"                    create another variable with 5 as content
SUM=$(expr $VAL1 + $VAL2)                       create variable from result of expression
SUM=$(( $VAL1 + $VAL2 ))                        create variable from result of expression


function myfunction {
}

myfunction() {
}

unset -f function_name                          unset a function

[ -f ~/.profile ] && cat ~/.profile             if .profile is readable, display the contents
[ -f ~/.profile ] || cat ~/.bashrc              if .profile does not exist, display the contents of .bashrc
if [ -x /bin/bash ] ; then
    echo "/bin/bash exists!"
else
    echo "/bin/bash does not exist!"
fi

case "$myvar" in
    debian | ubuntu)
    echo -n "Debian"
    ;;
    *)
    echo "catchall"
    ;;
esac

for VARNAME in LIST
do
    COMMANDS
done

while [ test is true ]
do
    command
done

until [ test is false ]
do
    command
done


Desktop & X11
=============
echo $DISPLAY                                   show display name
echo $WAYLAND_DISPLAY                           show wayland socket name

cat /usr/share/X11/xorg.conf.d/40-libinput.conf system provided input devices X-server configuration
cat /etc/X11/xorg.conf                          display configuration of X server (often missing when x-server self configures during boot)
cat /etc/X11/xorg.conf.d                        user configurations for x-server

setxkbmap -model chromebook -layout "gr(polytonic)"                   set keyboard model and layout during running X11 session
localectl --no-convert set-x11-keymap "gr(polytonic)" chomebook       set keyboard model and layout during running X11 session (no-convert = do not changt vt)

xpyinfo                                         info on running x-server instance
udo Xorg :1 -configure                          create a new configuration file, after creation mv from home folder to /etc/X11/xorg.conf

xev                                             create pop up window to get mouse and kb info
xinput --list                                   list device configuration on machine
xinput --list-props 6                           list details on device 6 taken from the 'xinput --list` output
libinput list-devices                           list input devices (libinput-tools package)
libinput debug-events --show-keycodes           show input kernel-events

xwininfo                                        get window info (click on it)
xlsclients -s                                   get list with all X11 clients (all windows)

xset -q                                         get quick short overview on a few features, e.g. screensaver, display power managment signaling settings

Install flatpak on gnome
------------------------
sudo apt install flatpak gnome-software-plugin-flatpak
sudo flatpak remote-add --if-not-exists flathub https://flathub.org/repo/flathub.flatpakrepo

Install media support on debian 12 gnome
----------------------------------------
sudo apt install libavcodec-extra vlc


Scripts & Long Commands
=======================

Send SMS to recipients listed in CSV file
-----------------------------------------
cat appointments.csv
"NAME","TIME","PHONE"
"Carol","11am","55557777"
"Dave","2pm","33334444"

cat template.txt
Hey <NAME>, don't forget your appointment tomorrow at <TIME>.

#! /bin/bash
  TEMPLATE=`cat template.txt`
  TAGS=(`sed -ne '1s/^"//;1s/","/\n/g;1s/"$//p' appointments.csv`)
  mapfile -t -s 1 ROWS < appointments.csv
  for (( r = 0; r < ${#ROWS[*]}; r++ ))
  do
    MSG=$TEMPLATE
    VALS=(`sed -e 's/^"//;s/","/\n/g;s/"$//' <<<${ROWS[$r]}`)
    for (( c = 0; c < ${#TAGS[*]}; c++ ))
    do
      MSG=`sed -e "s/<${TAGS[$c]}>/${VALS[$c]}/g" <<<"$MSG"`
    done
    echo curl --data message=\"$MSG\" --data phone=\"${VALS[2]}\" https://mysmsprovider/api
  done


Extract hostnames from bad login attempts
-----------------------------------------
sudo lastb -d -a --time-format notime | grep -v '[0-9]$' | sed -e 's/.* \(.*\)$/\1/' | sort | uniq


Show IP addresses of logins
---------------------------
last -i | egrep -o '[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}' | sort | uniq


Show only HTML part of HTML docutment
-------------------------------------
cat index.html | sed -ne '/<body>/,/<\/body>/p'


Remove tags from HTML document
------------------------------
sed -e 's/<[^>]*>//g' < index.html


Replace filenames in a template with acutal contents of files
-------------------------------------------------------------
sed -r -e 's/(^[^.]*)\.(crt|key)/cat \1.\2/e' < client.template > client.opvn

[^.]    This is everything but a literal dot.
/e      sed command to execute the 'cat' command


Get system info on kernel and free memory
-----------------------------------------
#!/bin/bash
FREE=$(( 1000 * $(sed -nre '2s/[^[:digit:]]//gp' < /proc/meminfo) ))       # store the number of free bytes in variable
OS=$(uname -o)
echo -e "Operating System:\t$OS"
echo -e "Unallocated RAM:\t$(( $FREE / 1024**2 )) MiB"

printf "Operating System:\t%s\nUnallocated RAM:\t%d MiB\n" OS$ $(( $FREE / 1024**2 ))

or

MSG='Operating System:\t%s\nUnallocated RAM:\t%d MiB\n'
printf "$MSG" $OS $(( $FREE / 1024**2 ))


Alphabetical ordering
=====================
LANG=C          # use this locale to avoid ambiguity when doing alphabetical ordering
text1="ABC"
text2="BCD"
if [ "$text1" < "$text" ]; then echo "text1 comes before text2."; fi


Loops
=====
for i in 1 2 3
do
    echo "$i"
done


SEQ=( 1 2 3 4 2 7 8 1 )     # create array

for (( i = 0; i < ${#SEQ[*]}; i++ ))
do
    echo "array content: ${SEQ[i]}";
done


Samba
=====
Basics
------
Samba has 2 layers of permissions/authentications. The first is the filesystem permissions of the shared folder and the second is the 'samba user' authentication.
To set up a samba share, we first create a folder e.g. '/data' and give user, group and world permissions.
Then we have 2 options, either we create a share (in /etc/samba/smb.conf) with guest permissions, or with user and/or group permissions.

In case of the "guest share", we need to have world permissions set on the share and the line "guest ok = yes" in samba.conf.
Avoid putting in the line 'valid users = user1 ,user2', or the guest login does not work.

In case of a "user/group share" we need to set the permissions of the shared folder accordingly and add the following lines to samba.conf:
The users need to be system users AND samba users (sudo smbpasswd -a tom && sudo smbpasswd -e tom):

#1 users tom and stephen have read access
path = /data
valid user = tom, stephen

#2 users tom and stephen have read/write access, new files will have 666 perms, and folders 777
path = /data
valid user = tom, stephen
read only = no                      (OR 'writable = yes', which is the old format)
create mask = 666
directory mask = 777

#3 user tom has read/write access, user stephen has only read access
path = /data
read list = stephen
write list = tom

Specifics
---------
sudo apt install samba
sudo systemctl stop smbd

JAY LACOIX (no guest, but forced user 'myuser':
-----------
configuration file: /etc/samba/smb.conf
sudo mv /etc/samba/smb.conf /etc/samba/smb.conf.orig
sudo vim /etc/samba/smb.conf:
    [global]
    server string = File Server
    workgroup = WORKGROUP
    security = user
    map to guest = Bad User
    name resolve order = host bcast wins
    include = /etc/samba/smbshared.conf

sudo vim /etc/samba/smbshared.conf:
    [Documents]
    path = /share/documents
    force user = myuser
    force group = users
    public = yes
    writable = no

    [Public]
    path = /share/public
    force user = myuser
    force group = users
    create mask = 0664
    force create mode = 0664
    directory mask = 0777
    force directory mode = 0777
    public = yes
    writable = yes

Each stanza is a share name. Windows users can access both shares as follows:
\\servername\Documents
\\servername\Public

Create the user and group, that a guest user is forced to become, when accessing the samba servers:
sudo useradd -s /bin/false myuser
sudo groupadd users

Create folders for both shares and set the correct permissions:
sudo mkdir -p /share/{documents,public}
sudo chown -R myuser:users /share

Test the samba configuration files for errors:
testparm

sudo systemctl start smbd.service
systemctl status smbd.service

Now we can acces the samba shares from remote hosts.
In Linux filemanagers we can use the 'Other Locations' section and add 'smb://servername/Public'

In case of problems, install the two packages:
sudo apt install smbclient cifs-utils

Connect to the remote share via command line (smbclient):
sudo mkdir /etc/samba           (to get rid of an annoying error message)
sudo touch /etc/samba/smb.conf
smbclient //fileserver1/DATA -U thomasgrusz
smb: \> help

We can also mount the samba share in the terminal (cifs-utils):
sudo mkdir /mnt/public
sudo mount -t cifs //severname/Public -o username=myuser,password=mypassword /mnt/public
However, /mnt/public folder is mounted as root:root, with 755 permissions.

But we can moutn the share defining user:group with 'uid' and 'gid' and turning off local(!) permissions with 'noperm', server permissions still apply:
sudo mount -t cifs //severname/Public -o username=thomasgrusz,password=mypassword,uid=thomasgrusz,gid=editors,noperm /mnt/public

We can also add an entry to /etc/fstab:
//servername/share/public /mnt/public cifs username=myuser,noauto 0 0

OTHER EXAMPLE WITH AUTHENTICATION:
-------------------------------
/etc/samba/smb.conf:
[global]
workgroup = WORKGROUP

[DATA]
path = /data
valid users = @editors
browsable = yes
read only = no

sudo groupadd editors
sudo usermod -aG editors thomasgrusz
sudo smbpasswd -a thomasgrusz               add user to samba and set samba password (this user is different from the linux system user, despite having the same name)
sudo smbpasswd -e thomasgrusz               enable smaba user
sudo mkdir /data
sudo chown -R :editors /data
sudo systemctl restart smbd

Access the share in a file manager as:
smb://fileserver1/DATA

SPECIAL SECTION - HOME FOLDER ON THE FLY
----------------------------------------
There is an easy solution to provide all users of a samba server with access to their homefolder:

samba.conf:
[home]
read only = no

smbclient //fileserver1/homes -U thomasgrusz
smbclient //fileserver1/homes -U alice


NFS Shares
==========
Server
------
sudo apt install nfs-kernel-server
sudo mkdir /exports
sudo mkdir /exports/documents

/etc/exports:
/exports/documents 192.168.50.0/255.255.255.0(rw,no_subtree_check)                  (man exports for help)

The IP range is the network from which a client is allowed to connect from.

/etc/idmap.conf:
Domain = b47-homenet

This configuration file is responsible for mapping user IDs from client to server, i.e. the UIDs.

sudo systemctl restart nfs-kernel-server

If you change the configuration file '/etc/exports' and have clients using the service do not use 'systemctl restart', but:
sudo exportfs -a

Client
------
sudo apt install nfs-common
sudo mkdir /mnt/documents
sudo mount fileserver1:/exports/documents /mnt/documents

Additional points:
------------------
To make it easier for the user we can include a line in the '/etc/exports' config file, that allows users to ommit the nfs-base-folder, e.g. '/exports:
/etc/exports:
/exports *(ro,fsid=0,no_subtree_check)

Now the user can mount the documents share simply with:
sudo mount fileserver1:/documents


MariaDB
=======
sudo apt install mariadb-server
systemctl status mariadb

sudo mysql_secure_installation
This adds security to the mariadb installation. Choose 'no' to unix_socket authentication. Otherwise choose the defaults.

The daemon config file is:
/etc/mysql/mariadb.cnf

sudo mariadb
OR
mariadb -u root -p
This allows to connect to the database shell using the root account password we just created (not the same as system root).

CREATE USER 'admin'@'localhost' IDENTIFIED BY 'passwd';
FLUSH PRIVILEGES;
This creates an administrative mariadb user.
'localhost' can be replaced by '192.168.50.%' for restriced access to particular netowrk or '%' for everywhere.

GRANT ALL PRIVILEGES ON *.* TO 'admin'@'localhost';
FLUSH PRIVILEGES;
Set permissions, i.e. grant full access to admin user. The admin user can manage all databases, but not users (-> root).

GRANT SELECT ON *.* TO 'readonlyuser'@'localhost' IDENTIFIED BY 'password';
FLUSH PRIVILEGES;
This creates a new read-only user and grants these permissions at the same time.
'SELECT' means read and '*.*' means all databases. In the wild, we usually would restrict a readonly user to one database only.

CREATE DATABASE mysampledb;
SHOW DATABASES;

SELECT HOST, USER, PASSWORD FROM mysql.user;
list certain fields from the user table in the 'mysql' database

GRANT SELECT ON mysampledb.* TO 'appuser'@'localhost' IDENTIFIED BY 'password';
Create a readonly-user restricted to the 'mysampledb' database
If we replace 'SELECT' with 'ALL', then the user has full access to the database mysampledb.

SHOW GRANTS FOR 'appuser'@'localhost';
Check the grants for a particular user.

DROP USER 'appuser'@'localhost'
Delete a user

USE mysampledb;
Select the 'mysampldb' database

CREATE TABLE Employees (Name char(15), Age int(3), Occupation char(15));
Create a table in the selected database named 'Employees' with the fields 'Name', 'Age', 'Occupation'.

SHOW COLUMNS IN Employees;
Check the fields in the table 'Employees'

INSERT INTO Employees VALUES ('Joe Smith', '26', 'Ninja');
Insert a record into the table 'Employees'.

SELECT * FROM Employees;
Display table with selection of records from the table 'Employees' in the database 'mysampledb'.

DELETE FROM Employees WHERE Name = 'Joe Smith';

DROP TABLE Employees;
Delete the table 'Employees' from the mysampledb database.

DROP DATABASE mysampledb;
Delete the entire database named 'mysampledb';

mysqldump -u admin -p --databases mysampledb > mysampledb.sql
Backup the database mysampledb.sql

sudo mariadb -u admin -p < mysampledb.sql


Web Server
==========
Apache on Ubuntu
----------------
sudo apt install apache2
systemctl status apache2

main Apache conf file:   /etc/apache2/apache2.conf

document root:           /var/www/html/
host config files:       /etc/apache2/sites-available

Steps for setting up a webserver:
1. upload website files to a dedicated directory in /var/www/ (document root)
2. ensure ownership and rwx permissions to www-data user
3. create conf file in /etc/apache2/sites-available/
4. enable site by reloading Apache

sudo a2ensite /etc/apache2/sites-available/virtual-host-configuration.conf
Enable site (creates a symlink in /etc/apache2/sites-enabled

sudo a2dissite /etc/apache2/sites-available/virtual-host-configuration.conf
Disables a site

Default host config file '/etc/apache2/sites-available/000-default.conf' :
<VirtualHost *:80>
	ServerAdmin webmaster@localhost
	DocumentRoot /var/www/html
	ErrorLog ${APACHE_LOG_DIR}/error.log
	CustomLog ${APACHE_LOG_DIR}/access.log combined
</VirtualHost>

If we want to serve another site on the same server we create another config file in /etc/apache2/sites-available and enable it.
If we have two NICs with two IP addresses we can use 2 config files with 2 different incomming IP addresses:
<VirtualHost 192.168.50.104:80>
AND
<VirtualHost 192.168.50.105:80>

If we only have one NIC, we can differentiate the sites by name as follows (mind the 'ServerName' line):
<VirtualHost *:80>
	ServerName mindcode.com
	ServerAdmin webmaster@localhost
	DocumentRoot /var/www/mindcode
	ErrorLog ${APACHE_LOG_DIR}/mindcode.com-error.log
	CustomLog ${APACHE_LOG_DIR}/mindcode.com-access.log combined
</VirtualHost>

Apache modules
--------------
apt search libapache2-mod
search for apache modules

important modules:
libapache2-mod-python
libapache2-mod-php8.1

apache2 -l
list built-in apache modules

a2enmod
list installed modules

sudo a2enmod php8.1
sudo systemctl restart apache2
enable the php module

sudo a2dismod php8.1
sudo systemctl restart apache2
disable module

apachectl -M
list enabled modules

Securing Apache with TLS
------------------------
sudo ss -tulnp | grep apache
check on what ports apache is listening to

sudo a2enmod ssl
enable ssl module to start HTTPS support

Apache's default ssl configuration file for an HTTPS site:
/etc/apache2/sites-available/default-ssl.conf:
<IfModule mod_ssl.c>
	<VirtualHost _default_:443>
		ServerAdmin webmaster@localhost
		DocumentRoot /var/www/html
		ErrorLog ${APACHE_LOG_DIR}/error.log
		CustomLog ${APACHE_LOG_DIR}/access.log combined
		SSLEngine on
		SSLCertificateFile	/etc/ssl/certs/ssl-cert-snakeoil.pem
		SSLCertificateKeyFile /etc/ssl/private/ssl-cert-snakeoil.key
		<FilesMatch "\.(cgi|shtml|phtml|php)$">
				SSLOptions +StdEnvVars
		</FilesMatch>
		<Directory /usr/lib/cgi-bin>
				SSLOptions +StdEnvVars
		</Directory>
	</VirtualHost>
</IfModule>

Important:
<VirtualHost _default_:443>             The server is listening on "any" (default) connections on port 443, that is not covered by a virtual host stanza.


sudo a2ensite default-ssl.conf
enable the Apache's default HTTPs site

Now we need to install a certificate, either self-signed or from an authority and create a folder for the certificate.
sudo mkdir /etc/apache2/certs

Self-signed certification and key:
sudo openssl req -x509 -nodes -days 365 -newkey rsa:2048 -keyout /etc/apache2/certs/mysite.key -out /etc/apache2/certs/mysite.crt

Now we need to configure Apache to use them.
sudo vim /etc/apache2/sites-available/default-ssl.conf:
ServerName mindcode.com:443
SSLCertificateFile /etc/apache2/certs/mysite.crt
SSLCertificateKeyFile /etc/apache2/certs/mysite.key

sudo systemctl reload apache2

NGINX on Ubuntu
---------------
sudo apt install nginx

Default config files:
/etc/nginx

Default nginx conf file '/etc/nginx/sites-available/default:
server {
	listen 80 default_server;
	listen [::]:80 default_server;
	root /var/www/html;
	index index.html index.htm index.nginx-debian.html;
	server_name _;
	location / {
		try_files $uri $uri/ =404;
	}
}

If we want to serve multiple sites from a server, we need to remove the 'default_server' part from the additional config files,
as nginx can only have one default server. Also change the 'server_name' line.

To enable sites we need to manually create a symlink:
sudo ln -s /etc/nginx/sites-available/mysite.com /etc/nginx/sites-enabled/mysite.com
sudo systemctl reload nginx

The default nginx site is enabled by default.

Enable TLS for nginx
--------------------
Ensure you have certification and key files.
In the config file change the listening port from 80 to 443 and add the 3 'ssl' lines as below:
server {
	listen 443 ssl;
	listen [::]:443 ssl;
	root /var/www/mindcode;
	index index.html index.htm index.nginx-debian.html;
	server_name mindcode.com;
	ssl_certificate /etc/nginx/certs/mysite.crt;
	ssl_certificate_key /etc/nginx/certs/mysite.key;
	ssl_session_timeout 5m;
	location / {
		try_files $uri $uri/ =404;
	}
}

Finally, we can add a directive to the default site, that redirects all HTTP requests as an HTTPS request,
so that only HTTPS requests are served, no HTTP requests will be served.
Add the following directive below the listen directives in /etc/nginx/sites-available/default:
server {
	listen 80 default_server;
	listen [::]:80 default_server;
	return 301 https://$host$request_uri;
    ...


Ansible
=======
There are 2 methods for Ansible to managa configurations on servers.
1. Push - there is a workstation with a list of server IPs and Ansible installed, configurations are pushed to all listed servers via Ansible commands.
2. Pull - Ansible is installed on ALL servers, and a cronjob regularly pulls configurations from a github repo.

Push
----
1. install ansible on a workstation or control server: sudo apt install ansible
2. create an 'ansible' user on the control server and every client node
3. setup the ansible user on the controll server to ssh into client nodes WITHOUT password (ssh-copy-id -i ~/.ssh/id_ed25519.pub client_IP)
4. configure sudo on client machines, so that the Ansible user can execute sudo WITHOUT password:
    sudo vim /etc/sudoers.d/ansible:
        ansible ALL=(ALL) NOPASSWD: ALL
    sudo chown root:root /etc/sudoers.d/ansible
    sudo chmod 440 /etc/sudoers.d/ansible

On the controller create a folder for the ansible files and a 'hosts' (inventory) file with the client's IP addresses:
sudo mkdir /etc/ansible
sudo touch /etc/ansible/hosts
sudo chown ansible /etc/ansible/hosts
sudo chmod 600 /etc/ansible/hosts
Put each server IP or name on one line in the hosts file.

The general ansible config file is /etc/ansible/ansible.cfg.
In this file, we can change the hosts-file with server inventory (above), the remote user (ansible) and the PRIVATE ssh key (e.g. ~/.ssh/ansible):
    [defaults]
    inventory = /etc/ansible/hosts
    remote_user = ansible
Ansible also looks for a ~/.ansible.cfg or local ./ansible.cfg file in the cwd, this is practical in case we want to run ansible from within a cloned git repo.

Test the ansible configuration with the ping module:
ansible all -m ping

Playbooks
---------
Playbooks are .yml files, where ansible instructions are listed and can be run against the servers listed in the inventory file (cf. above).

To run playbooks:
ansible-playbook packages.yml

playbook to install the git,htop and vim-nox packages
packages.yml:
---
- hosts: all
  become: true
  tasks:
  - name: Install packages
    ansible.builtin.apt:
      name:
        - git
        - htop
        - vim-nox

playbook to copy files to the client servers
copy_files.yml:
---
- hosts: all
  become: true
  tasks:
  - name: copy SSH motd
    ansible.builtin.copy:
      src: motd
      dest: /etc/motd

playbook to configure an apache webserver including website
apache.yml:
---
- hosts: all
  become: true
  tasks:
  - name: Install Apache
    ansible.builtin.apt:
      name: apache2
  - name: Start the apache2 services
    ansible.builtin.service:
      name: apache2
      state: started
      enabled: true
  - name: Copy index.html
    ansible.builtin.copy:
      src: index.html
      dest: /var/www/html/index.html

Pull
----
In a dynamic environment, typically cloud, where virtual servers are quickly created and destroyed,
Ansible's pull method is easier to manage the server inventory, as we do not have to maintain an inventory file.
We just install Ansible and Git on each servers and have a cronjob downloading a local playbook from a git repo
and have Ansible execute it locally. Run the 'ansible-pull' command as the 'ansible' user, having sudo powers:

ansible-pull -U https://github.com/thomasgrusz/ansible.git

If we do not specify a playbook, Ansible expects one named 'local.yml' in the repo root.
However, we can specify a playbook:

ansible-pull -U https://github.com/thomasgrusz/ansible.git playbooks/apache.yml

In the playbook we need to change the 'hosts: all' line to 'hosts: localhost', as we run the playbook locally:

local.yml:
---
- hosts: localhost
  become: true
  tasks:
  - name: Install Apache
    ansible.builtin.apt:
      name: apache2
  - name: Start the apache2 services
    ansible.builtin.service:
      name: apache2
      state: started
      enabled: true
  - name: Copy index.html
    ansible.builtin.copy:
      src: index.html
      dest: /var/www/html/index.html

The crontab could look like this for running the playbook every 5 minutes:
*/5 * * * * ansible-pull -U https://github.com/thomasgrusz/ansible.git

Commands
--------
ansible all --key-file ~/.ssh/id_ed25519 -i /etc/ansible/hosts -m ping                              ping all clients
ansible all --list-hosts                                                                            list all hosts
ansible all -m gather_facts                                                                         get information about the client servers
ansible all -m gather_facts --limit mariadb1                                                        get information about a specific server
ansible all -m apt -a update-cache=true --become                                                    update apt cache on clients, become the root user
ansible all -m apt -a update-cache=true --become --ask-become-pass                                  update apt cache on clients, become the root user and ask for the root password
ansible-playbook --list-tags apache.yml                                                             list tags inside playbook
ansible-playbook --tags apache2 -ask-become-pass site.yml                                           only run plays and tasks tagged with 'apache2' inside the 'site.yml' playbook


Features
--------
- conditions "when:"
- pre-tasks:
- tags: always
- groups [webserver]
- templates
- roles
- host_variables

Modules
-------
apt
dnf
copy
unarchive https://...com/.../something.zip
service
lineinfile
user
authorized_key

List of ansible.builtin. modules:
https://docs.ansible.com/ansible/latest/collections/index_module.html#ansible-builtin


Virtualisation
==============
KVM
---
/etc/libvirt/qemu                                   folder for XML VM files
/etc/machine-id                                     D-bus ID often linked to /var/lib/dbus/machine-id
dbus-uuidgen --ensure                               check that there is a machine-id
dbus-uuidgen --ensure=/etc/machine-id               create a new machine-id (delete old file first) 
dbus-uuidgen --get                                  show machine-id
grep --color -E 'vmx|svm' /proc/cpuinfo             verify if CPU extensions are enabled for INTEL/AMD 
sudo apt install virt-manager                       GUI tool for libvirt KVM virtual machines
virt-install                                        CLI installation command for a KVM virtual machine

LXC
---
sudo apt install lxc
sudo lxc-create -t download -n mycontainer          choose a container template to download and create new container
sudo lxc-ls --fancy                                 list containers including IP address
sudo lxc-info -n mycontainer                        show info on container
sudo lxc-start -n mycontainer                       start container
sudo lxc-attach -n mycontainer                      root shell into container to download ssh server and change user password

LXD
---
sudo apt install snapd                              install snap
sudo snap install lxd                               install lxd via snap (because it's from canonical)
sudo usermod -aG lxd thomasgrusz                    add user to lxd group
lxd init                                            initialize LXD installation, defaults are fine except make lxd available over the network

lxc remote list                                     list the available remote servers with images
lxc image list images:                              list all images on the remote server called 'images`
lxc image list images: debian                       list all debian images on the remote server
lxc image list images: ubuntu focal                 list all ubuntu focal (20.04) images on the remote server
lxc image list                                      list all downloaded images
lxc image delete ss73ns                             delete local image

Lxc launch ubuntu:22.04 mycontainer                 create an ubuntu container named 'mycontainer`, downloaded from the 'ubuntu` repo
lxc list                                            list all containers
lxc stop mycontainer                                stop mycontainer
lxc start mycontainer                               start mycontainer
lxc delete mycontainer                              delete mycontainer

lxc exec mycontainer bash                           start a bash shell in the container
lxc exec mycontainer -- su --login ubuntu           start a bash shell as the default user 'ubuntu`
lxc config set mycontainer boot.autostart 1         make container start automatically after host server reboot
lxc config set mycontainer boot.autostart.delay 30  add a 30s delay to the autostart to introduce order (e.g. a server dependent on a database server)
lxc config set mycontainer boot.autostart.order 8   set the order of container releative to other containers with autostart, 8 is arbitrary
lxc config set mycontainer limits.memory 1GB        set max memory limit of 1GB (safety)
lxc config show mycontainer                         show container configuration info

lxc snapshot mycontainer mysnap1                    take a container snapshot named 'mysnap1`
lxc info mycontainer                                show container info, including snapshots
lxc delete mycontainer/mysnap1                      delete a snapshot
lxc restore mycontainer mysnap1                     restore a container to the snapshot 'mysnap1`

lxc profile list                                    list all profiles
lxc profile create external                         create a new profile for LAN networking, claled 'external`
lxc profile delete external                         delete the profile
EDITOR=vim lxc profile edit external                edit the new profile with vim
lxc launch ubuntu:22.04 c1 -p default -p external   create new container 'c1` with 'default` profile and the overwriting 'external` profile
lxc profile add mycontainer external                add the 'external` profile to the first container 'mycontainer`

lxc file push mytext mycontainer/home/ubuntu/file   copy a the local file 'mytext` to the container foler /home/ubuntu as 'file`
lxc file pull mycontainer/home/ubuntu/jack.txt .    cope a file from the container to the local filesystem


Docker
------
sudo apt install docker.io
sudo usermod -aG docker thomasgrusz

docker search ubuntu                                                search for an existing ubuntu container image
docker pull ubuntu                                                  download a container image
docker rmi d54987324r98                                             remove local docker image using ID
docker run -it ubuntu /bin/bash                                     start docker container and run bash application (=ENTRYPOIONT)
exit                                                                exit and stop container
docker ps -a                                                        list all containers, running and down
docker start v9834df                                                start existing (shut down) contianer
docker stop v9834df                                                 stop container when not in container terminal
docker rm v9834df                                                   delete shutdown container
docker info                                                         list infos about docker on the system

docker run -dit -p 8080:80 ubuntu /bin/bash                         start container with port redirection host:8080 -> container:80
apt update && apt install apache2                                   install apache webserver
/etc/inid.d/apache2 start                                           start apache
ctrl+p+q (simultaneously)                                           exit container, but keep container running
docker commit 84357e73h ubuntu/apache-server:1.0                    create a new image from our new apache server container
docker run 84357e73h ubuntu/apache-server:1.0 /bin/bash             create container based our new image

create a Dockerfile to automatically build docker images
--------------------------------------------------------
mkdir ubuntu-apache-server
cd ubuntu-apache-server
vim Dockerfile:

FROM ubuntu
MAINTAINER Thomas Grusz <thomas.grusz@gmail.com>
# avoid confirmation messages
ARG DEBIAN_FRONTEND=noninteractive
# update container packages
RUN apt update; apt dist-upgrade -y
# install apache and vim
RUN apt install -y apache2 vim-nox
# start apache
ENTRYPOINT apache2ctl -D FOREGROUND

docker build -t ubuntu/apache-server:1.0 .                          build a new docker image based on the present Dockerfile
docker run -dit -p 8080:80 ubuntu/apache-server:1.0                 create a container based on the newly built docker image


Kubernetes
==========
Preliminary setup of nodes
--------------------------
- install all updates

- set hostname

- set static IP oder static lease from DHCP server for each node

- Raspberry Pi: set boot options
    /boot/firmware/cmdline.txt:
    cgroup_enable=cpuset cgroup_enable=memory cgroup_memory=1 swapaccount=1

- install containerd:
    sudo apt install containerd
    systemctl status containerd
    sudo mdkir /etc/containerd
    containerd config default | sudo tee /etc/containerd/config.toml
    sudo vim /etc/containerd/config.toml:
        find the line: [plugins."io.containerd.grpc.v1.cri".containerd.runtimes.runc.options]
        several lines below change: SystemCgroup = false
                                    SystemCgroup = true

- switch off swap:
    sudo swapoff -a
    comment out the 'swap` line in /etc/fstab

- enable bridging:
    sudo vim /etc/sysctl.conf:
        uncomment:  net.ipv4.ip forward=1

- Add the /etc/modules-load.d/k8s.conf file with the 'br_netfilter` module listed inside
    sudo vim /etc/modules-load.d/k8s.conf:
        br_netfilter

Installing Kurbernetes (on all nodes, controller and worker nodes)
----------------------
sudo mkdir /etc/apt/keyrings
sudo chown :thomasgrusz /etc/apt/keyrings
sudo chmod g+w /etc/apt/keyrings

curl -fsSL https://packages.cloud.google.com/apt/doc/apt-key.gpg | sudo gpg --dearmor -o /etc/apt/keyrings/kubernetes-archive-keyring.gpg
echo "deb [signed-by=/etc/apt/keyrings/kubernetes-archive-keyring.gpg] https://apt.kubernetes.io/ kubernetes-xenial main" | sudo tee /etc/apt/sources.list.d/kubernetes.list

sudo apt update
sudo apt install kubeadm kubectl kubelet

Initialize the cluser (on the controller node ONLY !!!)
-------------------------------------------------------
sudo kubeadm init --control-plane-endpoint=192.168.50.80 --node-name=controller --pod-network-cidr=10.244.0.0/16

The --control-plane-endpoint should equal to the static IP address of the control node.
The --node-name=controller should equal to the chosen hostname for the control node.
The --pod-network-cidr=10.244.0.0/16 should not be changed, as it perains to the internal kubernetes pod network (not nodes network, =overlay).

Copy the 2 'kubeadm join` commands, the first is to join control-plane nodes, the second for joining worker nodes:
kubeadm join 192.168.50.80:6443 --token pvxt5i.6ecserl66un7hpnl \
	--discovery-token-ca-cert-hash sha256:c3650f06488028aec213aba807c8605ef195b96249446c451a607b7fb2d2aa55 \
	--control-plane

kubeadm join 192.168.50.80:6443 --token pvxt5i.6ecserl66un7hpnl \
	--discovery-token-ca-cert-hash sha256:c3650f06488028aec213aba807c8605ef195b96249446c451a607b7fb2d2aa55

Run these 3 commands on the controller:
mkdir -p $HOME/.kube
sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config
sudo chown $(id -u):$(id -g) $HOME/.kube/config

Check the kubernets system pods already running, notice some are pending, becaus of the lack of an overlay network:
kubectl get pods --all-namespaces

Create an overlay network:
kubectl apply -f https://raw.githubusercontent.com/flannel-io/flannel/master/Documentation/kube-flannel.yml

Check the kubernetes system pods again, now all pods should be runnting.

Join worker nodes to the cluster
--------------------------------
Check the status of all nodes (run on controller node!):
kubctl get nodes

Run the above command with sudo in front to join the worker node to the cluster (run on worker nodes):
sudo kubeadm join 192.168.50.80:6443 --token pvxt5i.6ecserl66un7hpnl --discovery-token-ca-cert-hash sha256:c3650f06488028aec213aba807c8605ef195b96249446c451a607b7fb2d2aa55

Check if the new worker nodes are running by running this on the controller node:
kubctl get nodes

In case of trouble joining another worker node, we can retry with a new join-token (run on controller node):
kubeadm token create --print-join-command

Deploy an nginx container defined in a pod.yml file (on the controller node):
-----------------------------------------------------------------------------
pod.yml:
apiVersion: v1
kind: Pod
metadata:
  name: nginx-example
  labels:
    app: nginx
spec:
  containers:
    - name: nginx
      image: linuxserver/nginx
      ports:
        - containerPort: 80
          name: "nginx-http"

kubectl apply -f pod.yml

Check the new pod with:
kubectl get pods

To see on which worker node the new pod is running, we use:
kubectl get pods -o wide

Make the cluster accessible to the LAN (run on controller node):
----------------------------------------------------------------
vim service-nodeport.yml:
apiVersion: v1
kind: Service
metadata:
  name: nginx-example
spec:
  type: NodePort
  ports:
    - name: http
      port: 80
      nodePort: 30080
      targetPort: nginx-http
  selector:
    app: nginx

Add the nodeport service to the cluster:
kubectl apply -f service-nodeport.yml

Decommission a pod or service on the clouster:
----------------------------------------------
kubectl delete pod nginx-example
kubectl delete service nginx-example


Simple Python Webserver
=======================
python3 -m http.server 8080

